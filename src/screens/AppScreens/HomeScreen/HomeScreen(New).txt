import {
  Dimensions,
  FlatList,
  Image,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  Modal,
} from "react-native";
import React, { useState } from "react";
import * as ImagePicker from "expo-image-picker";
import * as DocumentPicker from "expo-document-picker";

import aboutIcon from "../../../../assets/UXMaterials/icons/flatIcons/purpleIcons/about.png";
import plusIcon from "../../../../assets/UXMaterials/icons/flatIcons/purpleIcons/plus.png";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import * as Notifications from "expo-notifications";
import * as Device from "expo-device";

import { RFPercentage } from "react-native-responsive-fontsize";

import { useContext } from "react";
import { AuthContext } from "../../../context/AuthContext";
import { BASE_URL } from "../../../config";

import { Avatar, Switch } from "react-native-paper";
import CustomButton from "../../../components/CustomButton/CustomButton";
import { useNavigation, useScrollToTop } from "@react-navigation/native";
import ModalTextInput from "../../../components/ModalTextInput/ModalTextInput";
import ModalMessage from "../../../components/ModalMessage/ModalMessage";

import noLinks from "../../../../assets/UXMaterials/placeholders/no-links.png";

import LoadingResource from "../../../components/LoadingResource/LoadingResource";

import UserTheme, {
  ButtonStyles,
  Colors,
  GlobalStyles,
  TestStyle,
  updateTheme,
} from "../../../styles/GlobalStyles";
import ModalPaymentImage from "../../../components/ModalPaymentImage/ModalPaymentImage";
import { useEffect } from "react";
import ModalViewFile from "../../../components/ModalViewFile/ModalViewFile";
import ModalCustomLink from "../../../components/ModalCustomLink/ModalCustomLink";

import { themes } from "../../../../themes/themes";
import ModalEmbedVideo from "../../../components/ModalEmbedVideo/ModalEmbedVideo";
import LinksLoadingScreen from "../../../components/LinksLoadingScreen/LinksLoadingScreen";
import ModalWithButtons from "../../../components/ModalWithButtons/ModalWithButtons";

var { width } = Dimensions.get("window");
var { height } = Dimensions.get("window");

var bgTest;

export default function HomeScreen() {
  const {
    registered,
    setRegistered,

    userInfo,
    userToken,
    userLinks,
    allLinks,
    getAllLinks,
    getUserData,
    getUserLinks,
    editLink,
    editCustomLink,
    removeDirectLink,
    userTheme,
    userName,
    userBio,
    userCoverPhoto,
    userProfilePhoto,

    userLinksLoading,

    refreshing,
    userInfoLoading,
    setShowModal,
    setShowInputModal,
    showInputModal,
    modalHeader,
    modalMessage,
    showSuccessModal,
    removeLinkFromUser,
    setUserLinks,
    setShowSuccessModal,
    userDirectLink,
    userDirectLinkID,
    setUserDirectLink,
    setUserDirectLinkID,
    setModalMessage,
    setModalHeader,
    editYouTubeLink,
    reactivateModalVisible,
    setReactivateModalVisible,

    editPaymentPhoto,
    editFile,

    editLinkMessageModalVisible,
    setEditLinkMessageModalVisible,

    saveNotificationPushToken,
    tempCoverPhoto,
    setTempCoverPhoto,
    tempProfilePhoto,
    setTempProfilePhoto,
  } = useContext(AuthContext);

  // useEffect(() => {
  //   if(userTheme){
  //     if(userTheme == 2){
  //       styles.flatListContainer.backgroundColor = "#562c73"

  //       updateTheme('#562c73');
  //     }
  //   }
  // }, [userTheme])

  const [isDirectLinkEnabled, setIsDirectLinkEnabled] = useState(
    userDirectLink == 0 ? false : true
  );

  const toggleSwitch = () => {
    setIsDirectLinkEnabled((previousState) => !previousState);
    setUserDirectLink(0);
    setUserDirectLinkID(null);
    removeDirectLink();
  };

  const ref = React.useRef(null);
  useScrollToTop(ref);

  const onRefresh = () => {
    getUserData();
  };

  const closeRegistrationModal = () => {
    setRegistered(false);
  };

  const [error, setError] = useState("none");

  const [oldLink, setOldLink] = useState();
  const [linkID, setLinkID] = useState();
  const [linkIndex, setLinkIndex] = useState();
  const [linkName, setLinkName] = useState();
  const [linkURL, setLinkURL] = useState();
  const [linkImage, setLinkImage] = useState();

  const [linkURLHeader, setLinkURLHeader] = useState();
  const [linkURLContent, setLinkURLContent] = useState();

  const [paymentModalVisible, setPaymentModalVisible] = useState(false);
  const [fileModalVisible, setFileModalVisible] = useState(false);
  const [customLinkModalVisible, setCustomLinkModalVisible] = useState(false);
  const [customLinkNameErrorVisible, setCustomLinkNameErrorVisible] =
    useState("none");
  const [customLinkURLErrorVisible, setCustomLinkURLErrorVisible] =
    useState("none");

  const [embedVideoModalVisible, setEmbedVideoModalVisible] = useState(false);
  const [embedVideoURL, setEmbedVideoURL] = useState();
  const [embedVideoTitle, setEmbedVideoTitle] = useState();
  const [embedVideoThumbnail, setEmbedVideoThumbnail] = useState();
  const [embedVideoTitleErrorVisible, setEmbedVideoTitleErrorVisible] =
    useState("none");
  const [embedVideoURLErrorVisible, setEmbedVideoURLErrorVisible] =
    useState("none");
  const [embedVideoURLErrorMessage, setEmbedVideoURLErrorMessage] = useState();

  const [file, setFile] = useState();

  const [fileName, setFileName] = useState();
  const [fileType, setFileType] = useState();
  const [fileTitle, setFileTitle] = useState();
  const [fileSize, setFileSize] = useState();
  const [fileURI, setFileURI] = useState();
  const [customLinkName, setCustomLinkName] = useState();
  const [customLinkURL, setCustomLinkURL] = useState();

  const [refreshFlatList, setRefreshFlatList] = useState(false);
  const [removeLinkModalVisible, setRemoveLinkModalVisible] = useState(false);
  const [successDeleteModalVisible, setSuccessDeleteModalVisible] =
    useState(false);

  const [errorMessageModalVisible, setErrorMessageModalVisible] =
    useState(false);

  const [removeLinkVisible, setRemoveLinkVisible] = useState(false);
  const [image, setImage] = useState(null);
  // useEffect(() => {
  //   const registerForPushNotifications = async () => {
  //     const { status } = await Notifications.getPermissionsAsync();
  //     console.log(status);
  //     if (status !== "granted") {
  //       const { status } = await Notifications.requestPermissionsAsync();
  //       if (status !== "granted") {
  //         return;
  //       }
  //     }

  //     const token = await Notifications.getExpoPushTokenAsync();
  //     console.log(token);
  //     setExpoPushToken(token);
  //   };
  //   registerForPushNotifications();
  // }, []);
  const getMimeType = (ext) => {
    // mime type mapping for few of the sample file types
    switch (ext) {
      case "pdf":
        return "application/pdf";
      case "jpg":
        return "image/jpeg";
      case "jpeg":
        return "image/jpeg";
      case "png":
        return "image/png";
    }
  };

  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 1,
    });

    console.log(result);
    if (!result.cancelled) {
      // setImage(result.assets[0].uri);
      setImage(result.uri);
    }
  };

  const pickPDF = async () => {
    let result = await DocumentPicker.getDocumentAsync({
      // type: ["image/jpeg", "image/png", "application/pdf"],
      type: "application/pdf",
    });
    console.log(result);
    if (result.uri) {
      setFileURI(result.uri);
      setFileSize(result.size);
      setFileName(result.name);
      setFileType(result.mimeType);

      // setShowEmbedModal(true);
    }
  };

  const navigation = useNavigation();
  const onAddLinksPressed = () => {
    // if (Object.keys(allLinks).length == 0) {
    //   getAllLinks();
    // }
    navigation.navigate("AddLinksScreen");
  };

  const onEditProfilePressed = () => {
    navigation.navigate("EditProfileScreen");
  };

  const onManageLinksPressed = () => {
    navigation.navigate("ManageLinksScreen");
    // setRemoveLinkVisible(true);
  };

  const onDirectLinkPressed = () => {
    navigation.navigate("DirectLinkScreen");
  };

  const onRemoveLink = ({ linkID }) => {
    // shake();
    removeLinkFromUser(linkID);
    let linkArray = userLinks;
    linkArray.splice(linkIndex, 1);
    setUserLinks(linkArray);
    setRefreshFlatList(!refreshFlatList);

    setRemoveLinkModalVisible(false);
    setSuccessDeleteModalVisible(true);
  };

  const onCancelPressed = () => {
    setShowModal(false);
    setShowInputModal(false);
    setShowSuccessModal(false);
    setPaymentModalVisible(false);
    setFileModalVisible(false);
    setCustomLinkModalVisible(false);
    setEditLinkMessageModalVisible(false);
    setErrorMessageModalVisible(false);
    setCustomLinkNameErrorVisible("none");
    setCustomLinkURLErrorVisible("none");
    setImage();
    setFileURI();
    setFileName();
    setFileTitle();
    setFileType();
    setError("none");
    setEmbedVideoModalVisible(false);
    setEmbedVideoTitleErrorVisible("none");
    setEmbedVideoURLErrorVisible("none");
    setEmbedVideoURLErrorMessage();
    setEmbedVideoThumbnail();
    setOldLink();
    setReactivateModalVisible(false);
    setRemoveLinkModalVisible(false);
    setSuccessDeleteModalVisible(false);
  };

  const onCloseErrorPressed = () => {
    setErrorMessageModalVisible(false);
  };

  const onSavePressed = () => {
    if (!linkURLContent) {
      setError("flex");
    } else {
      let newLinkURL = linkURLHeader + linkURLContent;

      if (linkURL == newLinkURL) {
        setErrorMessageModalVisible(true);
        setModalHeader("Error");
        setModalMessage("You have entered a duplicate link!");
      } else {
        console.log(linkIndex);
        console.log(newLinkURL);
        // let linkURL = linkURLHeader + linkURLContent;
        // console.log(linkURL);
        editLink(linkIndex, newLinkURL);
        setShowModal(false);
        setShowInputModal(false);
        setEditLinkMessageModalVisible(false);
        setError("none");
      }
    }
  };

  const onCustomLinkSavePressed = () => {
    if (!customLinkName) {
      setCustomLinkNameErrorVisible("flex");
    }
    if (!customLinkURL) {
      setCustomLinkURLErrorVisible("flex");
    }
    if (customLinkName && customLinkURL) {
      editCustomLink(linkIndex, customLinkName, customLinkURL);

      setCustomLinkModalVisible(false);
      setCustomLinkNameErrorVisible("none");
      setCustomLinkURLErrorVisible("none");
      setCustomLinkName();
      setCustomLinkURL();
    }
  };

  const validateYouTubeURL = (url) => {
    let reg = /^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/;
    if (reg.test(url) === false) {
      return false;
    }
  };

  const onEmbedVideoSaved = () => {
    console.log(oldLink);
    if (oldLink == embedVideoURL) {
      setEmbedVideoURLErrorVisible("flex");
      setEmbedVideoURLErrorMessage("THIS IS ALREADY AN EXISTING LINK!");
    }
    if (!embedVideoTitle) {
      setEmbedVideoTitleErrorVisible("flex");
    }
    if (validateYouTubeURL(embedVideoURL) === false) {
      setEmbedVideoURLErrorVisible("flex");
      setEmbedVideoURLErrorMessage("PLEASE ENTER A VALID YOUTUBE LINK!");
    }
    if (!embedVideoURL) {
      setEmbedVideoURLErrorVisible("flex");
      setEmbedVideoURLErrorMessage("PLEASE ENTER A LINK!");
    }
    if (embedVideoURL && embedVideoTitle) {
      let videoID;

      if (embedVideoURL.includes("youtu.be")) {
        videoID = embedVideoURL.split(".be/")[1];
      } else {
        videoID = embedVideoURL.split("v=")[1].split("&")[0];
      }

      let thumbnailURI = `https://img.youtube.com/vi/${videoID}/hqdefault.jpg`;

      console.log(linkIndex + embedVideoURL, embedVideoTitle, thumbnailURI);
      editYouTubeLink(linkIndex, embedVideoTitle, embedVideoURL, thumbnailURI);

      setEmbedVideoModalVisible(false);
      setEmbedVideoTitleErrorVisible("none");
      setEmbedVideoURLErrorVisible("none");
      setEmbedVideoURLErrorMessage();
      setEmbedVideoThumbnail();
    }
  };

  const onUploadFilePressed = () => {
    let _fileTitle;
    if (!fileTitle) {
      if (fileType == "application/pdf") {
        _fileTitle = "PDF File";
      } else {
        _fileTitle = "Image";
      }
      editFile(fileURI, fileName, fileType, _fileTitle, linkIndex);
    } else {
      editFile(fileURI, fileName, fileType, fileTitle, linkIndex);
    }
    setFileModalVisible(false);
    setFileURI();
    setFileName();
    setFileTitle();
    setFileType();
    // console.log(fileTitle);
  };

  const onUploadPhotoPressed = () => {
    if (image) {
      const fileUri = image;

      let fileName = fileUri.split("/").pop();

      const extArr = /\.(\w+)$/.exec(fileName);
      const fileType = getMimeType(extArr[1]);
      editPaymentPhoto(linkID, linkIndex, fileUri, fileName, fileType);
      setPaymentModalVisible(false);
    }
  };

  return (
    <View style={styles.root}>
      {/* {userInfoLoading == true ? <LoadingScreen /> : null} */}
      {/* {userLinksLoading == true ? <LinksLoadingScreen /> : null} */}

      <View>
        {/* FOR FIRST TIME REGISTRATION */}
        {registered ? (
          <Modal
            transparent
            animationType="fade"
            hardwareAccelerated
            visible={registered}
            onRequestClose={closeRegistrationModal}
          >
            <ModalMessage
              modalHeader="Welcome to Yeet!"
              modalMessage="You have successfully registered to Yeet. Enjoy!"
              onOKPressed={closeRegistrationModal}
            />
          </Modal>
        ) : null}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={reactivateModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalMessage
            modalHeader={modalHeader}
            modalMessage={modalMessage}
            onOKPressed={onCancelPressed}
          />
        </Modal>
        {/* SUCCESS MESSAGE MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={editLinkMessageModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalMessage
            modalHeader={modalHeader}
            modalMessage={modalMessage}
            onOKPressed={onCancelPressed}
          />
        </Modal>
        {/* ERROR MESSAGE MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={errorMessageModalVisible}
          onRequestClose={onCloseErrorPressed}
        >
          <ModalMessage
            modalHeader={modalHeader}
            modalMessage={modalMessage}
            onOKPressed={onCloseErrorPressed}
          />
        </Modal>
        {/* EDIT LINK MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={showInputModal}
          onRequestClose={onCancelPressed}
        >
          <ModalTextInput
            value={linkURLContent}
            // onChangeText={setLinkURLContent}
            onChangeText={(text) => {
              if (!text) {
                setError("flex");
                setLinkURLContent();
              } else {
                if (text.includes(" ")) {
                  setLinkURLContent(text.trim());
                } else {
                  setError("none");
                  // if (){}
                  // console.log(text);
                  setLinkURLContent(text);
                }
              }
            }}
            warningVisible={error}
            defaultValue={linkURLHeader}
            linkName={linkName}
            linkImage={{ uri: `${BASE_URL}images/social-logo/${linkImage}` }}
            onCancelPressed={onCancelPressed}
            onSavePressed={onSavePressed}
          />
        </Modal>
        {/* EDIT CUSTOM LINK MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={customLinkModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalCustomLink
            // placeholder={linkURL}
            customLinkNameValue={customLinkName}
            customLinkURLValue={customLinkURL}
            // linkName={linkName}
            linkImage={{ uri: `${BASE_URL}images/social-logo/${linkImage}` }}
            onLinkNameChangeText={(text) => {
              if (!text) {
                setCustomLinkNameErrorVisible("flex");
                setCustomLinkName();
              } else {
                setCustomLinkNameErrorVisible("none");
                setCustomLinkName(text);
              }
            }}
            onLinkURLChangeText={(text) => {
              if (!text) {
                setCustomLinkURLErrorVisible("flex");
                setCustomLinkURL();
              } else {
                setCustomLinkURLErrorVisible("none");
                if (text.includes(" ")) {
                  setCustomLinkURL(text.trim());
                } else {
                  setCustomLinkURL(text);
                }
              }
            }}
            linkNameWarningVisible={customLinkNameErrorVisible}
            linkURLWarningVisible={customLinkURLErrorVisible}
            onCancelPressed={onCancelPressed}
            onSavePressed={onCustomLinkSavePressed}
            warningVisible={error}
          />
        </Modal>
        {/* EDIT EMBED VIDEO MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={embedVideoModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalEmbedVideo
            placeholder={"Enter YouTube link here"}
            linkImage={{ uri: linkImage }}
            onLinkURLChangeText={(text) => {
              if (!text) {
                setEmbedVideoURLErrorVisible("flex");
                setEmbedVideoURLErrorMessage("PLEASE ENTER A LINK!");
                setEmbedVideoURL(null);
              } else {
                setEmbedVideoURLErrorVisible("none");
                if (text.includes(" ")) {
                  setEmbedVideoURL(text.trim());
                } else {
                  setEmbedVideoURL(text);
                }
              }
            }}
            onLinkNameChangeText={(text) => {
              if (!text) {
                setEmbedVideoTitleErrorVisible("flex");
                setEmbedVideoTitle(null);
              } else {
                setEmbedVideoTitleErrorVisible("none");
                setEmbedVideoTitle(text);
              }
            }}
            embedVideoTitle={embedVideoTitle}
            embedVideoURL={embedVideoURL}
            embedVideoTitleErrorVisible={embedVideoTitleErrorVisible}
            embedVideoURLErrorVisible={embedVideoURLErrorVisible}
            embedVideoURLErrorMessage={embedVideoURLErrorMessage}
            onCancelPressed={onCancelPressed}
            onSavePressed={onEmbedVideoSaved}
          />
        </Modal>
        {/* SHOW PAYMENT MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={paymentModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalPaymentImage
            onChangePhotoPressed={pickImage}
            image={image}
            cancelText="Cancel"
            onCancelPressed={onCancelPressed}
            saveText="Save"
            onSavePressed={onUploadPhotoPressed}
            disabled={image ? false : true}
            modalImage={{ uri: `${BASE_URL}images/social-logo/${linkImage}` }}
            defaultImage={
              linkID == 23
                ? `${BASE_URL}images/payments/gcash/${linkURL}`
                : linkID == 24
                ? `${BASE_URL}images/payments/paymaya/${linkURL}`
                : `${BASE_URL}images/payments/paymongo/${linkURL}`
            }
          />
        </Modal>
        {/* SHOW PDF MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={fileModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalViewFile
            cancelText="Cancel"
            onCancelPressed={onCancelPressed}
            saveText="Save"
            onSavePressed={onUploadFilePressed}
            fileTitle={fileTitle}
            fileName={fileName}
            onChangeText={(text) => setFileTitle(text)}
            onUploadFilePressed={pickPDF}
          />
        </Modal>

        {/* CONFIRM DELETE LINK MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={removeLinkModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalWithButtons
            onCancelPressed={onCancelPressed}
            modalHeaderText={linkName}
            modalMessage="Are you sure you want to remove this link?"
            // modalImage={{ uri: `${BASE_URL}images/social-logo/${linkImage}` }}
            modalImage={linkID == 30 ? linkImage : `${BASE_URL}images/social-logo/${linkImage}`}
            onRemovePressed={onRemoveLink}
            cancelText="Cancel"
            saveText="Delete"
          />
        </Modal>

        {/* SUCCESS MESSAGE MODAL */}
        <Modal
          transparent
          animationType="fade"
          hardwareAccelerated
          visible={successDeleteModalVisible}
          onRequestClose={onCancelPressed}
        >
          <ModalMessage
            modalHeader="Success"
            modalMessage="Link successfully removed!"
            onOKPressed={onCancelPressed}
          />
        </Modal>

        <FlatList
          onRefresh={onRefresh}
          refreshing={refreshing}
          ref={ref}
          overScrollMode="never"
          showsVerticalScrollIndicator={false}
          numColumns={3}
          style={styles.flatListContainer}
          ListHeaderComponent={() => (
            <View style={styles.mainContainer}>
              {/* COVER PHOTO */}
              <View style={GlobalStyles.coverPhotoContainer}>
                {tempCoverPhoto ? (
                  <Image
                    source={{
                      uri: tempCoverPhoto,
                    }}
                    resizeMode="stretch"
                    style={GlobalStyles.coverPhoto}
                  />
                ) : userCoverPhoto ? (
                  <Image
                    source={{
                      uri: `${BASE_URL}images/mobile/cover/${userCoverPhoto}`,
                    }}
                    resizeMode="stretch"
                    style={GlobalStyles.coverPhoto}
                  />
                ) : userInfoLoading ? (
                  <LoadingResource />
                ) : null}
              </View>
              {/* PROFILE PHOTO */}
              <View style={GlobalStyles.profilePhotoContainer}>
                <View style={GlobalStyles.profilePhoto}>
                  {tempProfilePhoto ? (
                    <Avatar.Image
                      backgroundColor="#DEDEDE"
                      size={RFPercentage(15)}
                      source={{
                        uri: tempProfilePhoto,
                      }}
                    />
                  ) : userProfilePhoto ? (
                    <Avatar.Image
                      backgroundColor="#DEDEDE"
                      size={RFPercentage(15)}
                      source={{
                        uri: `${BASE_URL}images/mobile/photos/${userProfilePhoto}`,
                      }}
                    />
                  ) : userInfoLoading == true ? (
                    <LoadingResource />
                  ) : null}
                </View>
              </View>

              <View style={GlobalStyles.userNameAndBioContainer}>
                <View style={GlobalStyles.userNameContainer}>
                  {/* <Text style={GlobalStyles.userNameText}> */}
                  <Text style={GlobalStyles.userNameText}>
                    {userName ? userName : null}
                    {/* {userInfoLoading == false
                      ? userName
                        ? userName
                        : userInfo.usr_name
                      : ""} */}
                    {/* {Object.keys(userLinks).length} */}
                  </Text>
                </View>

                <View style={GlobalStyles.userBioContainer}>
                  <Text style={GlobalStyles.userBioText}>
                    {userBio ? userBio : null}
                    {/* {userInfoLoading == false
                      ? userBio
                        ? userBio
                        : userInfo.usr_bio
                      : ""} */}
                  </Text>
                </View>
              </View>

              {userInfoLoading == false ? (
                !removeLinkVisible ? (
                  <View style={styles.mainContentContainer}>
                    <CustomButton
                      bgColor="transparent"
                      fgColor="#562C73"
                      btnText="Edit Profile"
                      borderColor={Colors.yeetPurple}
                      borderWidth="2"
                      onPress={onEditProfilePressed}
                    />

                    <View
                      style={{ flexDirection: "row", justifyContent: "center" }}
                    >
                      <TouchableOpacity
                        style={styles.buttons}
                        activeOpacity={0.5}
                        onPress={onManageLinksPressed}
                      >
                        <Image
                          source={aboutIcon}
                          style={styles.buttonImage}
                          resizeMode="stretch"
                        />
                        <Text style={styles.buttonText}>Manage Links</Text>
                      </TouchableOpacity>
                      <TouchableOpacity
                        style={styles.buttons}
                        activeOpacity={0.8}
                        onPress={onDirectLinkPressed}
                      >
                        <Image
                          source={aboutIcon}
                          style={styles.buttonImage}
                          resizeMode="stretch"
                        />
                        <Text style={styles.buttonText}>Direct Link</Text>
                        <Switch
                          style={{ height: RFPercentage(2.5) }}
                          // style={{transform: [{ scaleX: RFPercentage(0.1) }, { scaleY: RFPercentage(0.1) }]}}
                          disabled={userDirectLink == 0 ? true : false}
                          trackColor={{ false: "#767577", true: "#D81D4C55" }}
                          thumbColor={
                            userDirectLink == 1 ? "#D81D4C" : "#F4F3F4"
                          }
                          onValueChange={toggleSwitch}
                          value={userDirectLink == 1 ? true : false}
                          // value={isDirectLinkEnabled}
                        />
                      </TouchableOpacity>
                    </View>

                    {userLinks.length == 0 ? (
                      <View
                        style={{
                          width: "100%",
                          justifyContent: "center",
                          alignItems: "center",
                        }}
                      >
                        {/* <Text
                      style={{
                        fontSize: RFPercentage(3),
                        marginVertical: "5%",
                      }}
                    >
                      You have no links yet.
                    </Text> */}
                        <Image
                          source={noLinks}
                          resizeMode="center"
                          style={{
                            marginVertical: "5%",
                            height: RFPercentage(20),
                            width: RFPercentage(30),
                            // backgroundColor: "red",
                          }}
                        />
                        {/* <Text
                        style={{
                          marginVertical: "3%",
                          fontSize: RFPercentage(2),
                        }}
                      >
                        You have no links yet.
                      </Text> */}
                        <View
                          style={{
                            justifyContent: "center",
                            alignItems: "center",
                            width: "50%",
                          }}
                        >
                          <CustomButton
                            bgColor="transparent"
                            fgColor="#562C73"
                            btnText="Add Link"
                            borderColor={Colors.yeetPurple}
                            borderWidth="2"
                            onPress={onAddLinksPressed}
                          />
                        </View>
                      </View>
                    ) : null}
                  </View>
                ) : null
              ) : null}
            </View>
          )}
          ListFooterComponent={() =>
            userLinksLoading || userInfoLoading ? (
              <View>
                <LoadingResource />
              </View>
            ) : removeLinkVisible ? (
              <View
                style={{
                  width: " 100%",
                  justifyContent: "center",
                  alignItems: "center",
                  height: height * 0.1,
                }}
              >
                <View
                  style={{
                    justifyContent: "center",
                    alignItems: "center",
                    width: "50%",
                  }}
                >
                  <CustomButton
                    bgColor="transparent"
                    fgColor={Colors.yeetPurple}
                    btnText="Cancel"
                    borderColor={Colors.yeetPurple}
                    borderWidth="2"
                    onPress={() => setRemoveLinkVisible(false)}
                  />
                </View>
              </View>
            ) : (
              <View
                style={{
                  width: " 100%",
                  justifyContent: "center",
                  alignItems: "center",
                  height: height * 0.05,
                }}
              >
                <View
                  style={{
                    justifyContent: "center",
                    alignItems: "center",
                    width: "50%",
                  }}
                ></View>
              </View>
            )
          }
          extraData={refreshFlatList}
          keyExtractor={(item) => item.uln_id}
          data={
            userInfoLoading == false ? [...userLinks, { addLinks: true }] : null
          }
          renderItem={({ item, index }) => {
            if (userInfoLoading == false) {
              // if (Object.keys(userLinks).length > 0) {
              if (!removeLinkVisible) {
                if (item.addLinks) {
                  return (
                    <TouchableOpacity
                      style={[
                        {
                          marginLeft:
                            index % 3 == 0 ? width * 0.15 : width * 0.025,
                          marginRight:
                            index % 3 == 2 ? width * 0.15 : width * 0.025,
                          display: userLinks.length == 0 ? "none" : "flex",
                        },

                        ButtonStyles.socialMediaButtons,
                      ]}
                      onPress={onAddLinksPressed}
                    >
                      <Image
                        source={plusIcon}
                        style={{
                          width: width * 0.13,
                          height: width * 0.13,
                          opacity: 1,
                        }}
                        resizeMode="stretch"
                      />
                      <Text
                        style={{
                          fontSize: RFPercentage(1.3),
                        }}
                      >
                        Add Link
                      </Text>
                    </TouchableOpacity>
                  );
                  // }
                }
              }
              return (
                <TouchableOpacity
                  style={[
                    {
                      marginLeft: index % 3 == 0 ? width * 0.15 : width * 0.025,
                      marginRight:
                        index % 3 == 2 ? width * 0.15 : width * 0.025,
                    },
                    ButtonStyles.socialMediaButtons,
                  ]}
                  activeOpacity={!removeLinkVisible ? 0.2 : 1}
                  onPress={() => {
                    if (!removeLinkVisible) {
                      if (
                        item.lnk_id == 23 ||
                        item.lnk_id == 24 ||
                        item.lnk_id == 26
                      ) {
                        setPaymentModalVisible(true);
                        setLinkID(item.lnk_id);
                        setLinkName(item.lnk_name);
                        setLinkURL(item.uln_url);
                        setLinkImage(item.lnk_image);
                        setLinkIndex(item.uln_id);

                        console.log(item.uln_id);
                      } else if (item.lnk_id == 30) {
                        setEmbedVideoModalVisible(true);
                        setLinkImage(item.uln_youtube_thumbnail);
                        setEmbedVideoTitle(item.uln_custom_link_name);
                        setEmbedVideoURL(item.uln_url);
                        setLinkIndex(item.uln_id);
                        setOldLink(item.uln_url);
                      } else if (item.lnk_id == 31) {
                        setFileTitle(item.uln_file_title);
                        setFileName(item.uln_original_file_name);
                        setFile(item.uln_file);
                        setLinkIndex(item.uln_id);
                        setFileModalVisible(true);
                      } else if (item.lnk_id == 32) {
                        setCustomLinkModalVisible(true);
                        setCustomLinkName(item.uln_custom_link_name);
                        setCustomLinkURL(item.uln_url);
                        setLinkImage(item.lnk_image);
                        setLinkIndex(item.uln_id);
                        console.log(item.uln_id);
                      } else {
                        setShowInputModal(true);
                        setLinkName(item.lnk_name);
                        setLinkURL(item.uln_url);
                        setLinkImage(item.lnk_image);
                        setLinkIndex(item.uln_id);
                        setLinkURLHeader(item.lnk_url);

                        let linkContent = item.uln_url.replace(
                          item.lnk_url,
                          ""
                        );

                        console.log(item.uln_url);
                        setLinkURLContent(linkContent);
                      }
                    }
                  }}
                >
                  <View
                    style={{
                      paddingHorizontal: width * 0.005,
                      paddingVertical: height * 0.005,
                      // backgroundColor: "#33f3",
                    }}
                  >
                    <TouchableOpacity
                      disabled={removeLinkVisible ? false : true}
                      style={{
                        // backgroundColor: 'blue',
                        borderWidth: 0,
                        position: "absolute",
                        zIndex: 1,
                        right: 1,
                        top: 1,
                        opacity: removeLinkVisible ? 1 : 0,
                        display:
                          userDirectLinkID == item.uln_id ? "none" : "flex",
                      }}
                      onPress={() => {
                        setLinkIndex(item.uln_id);
                        setLinkID(item.lnk_id)
                        if (item.lnk_id == 30) {
                          setLinkName(item.uln_custom_link_name);
                          setLinkImage(item.uln_youtube_thumbnail);
                        } else if (item.lnk_id == 31) {
                          setLinkName(item.uln_file_title);
                          setLinkImage(item.lnk_image);
                        } else if (item.lnk_id == 32) {
                          setLinkName(item.custom_link_name);
                          setLinkImage(item.lnk_image);
                        } else {
                          setLinkName(item.lnk_name);
                          setLinkImage(item.lnk_image);
                        }
                        setRemoveLinkModalVisible(true);
                      }}
                    >
                      <MaterialCommunityIcons
                        style={{
                          backgroundColor: Colors.yeetGray,
                          padding: "5%",
                          borderRadius: 5000,
                        }}
                        name="close"
                        size={width * 0.03}
                        color="#000"
                        //   size={RFPercentage(2.3)}
                      />
                    </TouchableOpacity>
                    <Image
                      prefetch
                      source={
                        item.lnk_id == 30
                          ? { uri: item.uln_youtube_thumbnail }
                          : {
                              uri: `${BASE_URL}images/social-logo/${item.lnk_image}`,
                            }
                      }
                      style={{
                        borderRadius: item.lnk_id == 30 ? 20 : null,
                        width: width * 0.13,
                        height: width * 0.13,
                        opacity:
                          userDirectLink == 1
                            ? userDirectLinkID == item.uln_id
                              ? 1
                              : 0.3
                            : 1,
                      }}
                      resizeMode="contain"
                    />
                  </View>
                  {/* <Text>{item.uln_id}</Text>
                        <Text>{item.lnk_id}</Text> */}
                  <Text
                    style={{
                      fontSize: RFPercentage(1.5),
                    }}
                  >
                    {item.lnk_id == 30 || item.lnk_id == 32
                      ? item.uln_custom_link_name
                      : item.lnk_id == 31
                      ? item.uln_file_title
                      : item.lnk_name}
                    {/* {item.lnk_name} */}
                  </Text>
                </TouchableOpacity>
              );
            }
          }}
        />
      </View>
    </View>
  );
}

let styles = StyleSheet.create({
  root: {
    flex: 1,
    backgroundColor: "#FFF",
  },

  flatListContainer: {
    backgroundColor: "#fff",
    paddingBottom: height * 0.5,
  },

  fontColor: {
    color: bgTest,
  },

  mainContainer: {
    flex: 1,
    alignItems: "center",
  },

  mainContentContainer: {
    // backgroundColor: "#00f4",
    marginBottom: "2.5%",
    width: "70%",
    flex: 1,
  },

  buttons: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    width: "50%",
    borderRadius: 50,
    paddingVertical: "2.5%",
    // height: RFPercentage(5),
    // backgroundColor:'blue'
  },

  buttonImage: {
    borderRadius: 1000,
    height: RFPercentage(3),
    width: RFPercentage(3),
    marginRight: "2%",
  },

  buttonText: {
    fontSize: RFPercentage(1.5),
  },
});
